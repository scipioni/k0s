---
- name: Create Longhorn namespace
  kubernetes.core.k8s:
    name: longhorn-system
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: /var/lib/k0s/pki/admin.conf

- name: Add Longhorn Helm repository
  kubernetes.core.helm_repository:
    name: longhorn
    repo_url: https://charts.longhorn.io
    kubeconfig: /var/lib/k0s/pki/admin.conf

- name: Install Longhorn
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    release_namespace: longhorn-system
    create_namespace: yes
    values:
      defaultSettings:
        defaultReplicaCount: "{{ longhorn_replica_count }}"
        storageReservedPercentageForDefaultDisk: 30
        backupTarget: "s3://YOUR_BACKUP_BUCKET@us-east-1/"
        backupTargetCredentialSecret: "aws-secret"
      persistence:
        defaultClass: true
        defaultClassReplicaCount: "{{ longhorn_replica_count }}"
    kubeconfig: /var/lib/k0s/pki/admin.conf

- name: Create storage directories on each node
  file:
    path: "{{ longhorn_storage_path }}"
    state: directory
    mode: '0755'
  delegate_to: "{{ item }}"
  loop: "{{ groups['cluster'] }}"

- name: Create Longhorn StorageClass
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: longhorn-ha
      provisioner: driver.longhorn.io
      allowVolumeExpansion: true
      reclaimPolicy: Delete
      volumeBindingMode: Immediate
      parameters:
        numberOfReplicas: "2"
        staleReplicaTimeout: "30"
        fromBackup: ""
    kubeconfig: /var/lib/k0s/pki/admin.conf

- name: Wait for Longhorn to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: longhorn-manager
    namespace: longhorn-system
    kubeconfig: /var/lib/k0s/pki/admin.conf
  register: longhorn_status
  until: longhorn_status.resources[0].status.readyReplicas == longhorn_status.resources[0].status.replicas
  retries: 30
  delay: 10

- name: Create AWS backup secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: aws-secret
        namespace: longhorn-system
      type: Opaque
      stringData:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
        AWS_ENDPOINTS: ""
    kubeconfig: /var/lib/k0s/pki/admin.conf
  when: aws_access_key is defined and aws_secret_key is defined